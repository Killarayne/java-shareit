drop table if exists USERS cascade;
drop table if exists ITEMS cascade;
drop table if exists BOOKINGS cascade;
drop table if exists COMMENTS cascade;

create table if not exists USERS
(
    ID    bigint generated by default as identity not null,
    NAME  varchar(255)                            not null,
    EMAIL varchar(255)                            not null,
    constraint PK_USER
        primary key (ID),
    constraint UQ_USER_EMAIL
        unique (EMAIL)
);

create table if not exists ITEMS
(
    ID          bigint generated by default as identity not null,
    NAME        varchar,
    DESCRIPTION varchar,
    AVAILABLE   boolean,
    OWNER_ID    bigint                                  not null,
    REQUEST_ID  int,
    primary key (ID),
    constraint ITEMS_USERS_ID_FK
        foreign key (OWNER_ID)
            references USERS (ID) on delete cascade
);

create table if not exists BOOKINGS
(
    ID         bigint generated by default as identity not null,
    START_TIME timestamp,
    END_TIME   timestamp,
    ITEM_ID    bigint,
    BOOKER_ID  bigint,
    STATUS     varchar,
    primary key (ID),
    constraint BOOKING_USERS_ID_FK
        foreign key (BOOKER_ID)
            references USERS (ID) on delete cascade,
    constraint BOOKING_ITEMS_ID_FK
        foreign key (ITEM_ID)
            references ITEMS (ID) on delete cascade
);


create table if not exists COMMENTS
(
    ID        int generated by default as identity not null,
    TEXT      varchar,
    AUTHOR_ID bigint,
    ITEM_ID   bigint,
    primary key (ID),
    constraint COMMENTS_ITEMS_ID_FK
        foreign key (ITEM_ID)
            references ITEMS on delete cascade,
    constraint COMMENTS_USERS_ID_FK
        foreign key (AUTHOR_ID)
            references USERS on delete cascade
);

create table if not exists REQUESTS
(
    ID           int generated by default as identity not null,
    DESCRIPTION  varchar,
    REQUESTOR_ID bigint,
    CREATED      timestamp,
    primary key (ID),
    constraint REQUESTS_USERS_ID_FK
        foreign key (REQUESTOR_ID)
            references USERS on delete cascade
);